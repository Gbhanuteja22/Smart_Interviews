Bitwise Amplification 
You are given 2 arrays, A and B, of length N and M, both consisting of positive integers.
There are M modifications. On the ith modification (1 ≤ i ≤ M), for each j (1 ≤ j ≤ N), such that A(j) is divisible by 2B(i), you add 2B(i)-1 to A(j). After all M-modifications, you need to print the array A.

Input Format
The first line of input contains T - number of test cases. It's followed by 3T lines. For each test case, the first line contains two integers N and M, denoting the size of array A and array B, respectively.
The second line of each test case contains array A elements separated by spaces.
The third line of each test case contains array B elements separated by spaces.

Output Format
Print the array A after all of the modifications.

Constraints
30 points
1 <= N, M <= 103

70 points
1 <= N, M <= 105

General Constraints
1 <= T <= 100
1 <= A[i] <= 109
1 <= B[i] <= 30

Example
Input
4
5 3
1 2 3 8 8
3 5 4
7 3
7 8 12 36 48 6 3
10 4 2
5 4
2 2 2 2 2
1 1 1 1
5 5
1 2 4 8 16
5 2 3 4 1

Output
1 2 3 12 12
7 10 14 38 58 6 3
3 3 3 3 3
1 3 7 11 19

Explanation

Assume 1-based positions for the explanation

Test Case 1:
The first modification will add 4 (23-1=4) to the integers in positions 4 and 5 of array A, because A[4] = 8 and A[5] = 8 are divisible by 2B[1]=23=8. After this addition, the array would be [1,2,3,12,12].
Other operations will not modify the array.

Test Case 2:
The first modification query does not change the array.
The second modification query will add 8 to the integer in position 5, so that the array would look like this: [7,8,12,36,56,6,3].
The third modification query will add 2 to the integers in positions 2,3,4 and 5. The array would then look like this: [7,10,14,38,58,6,3].
